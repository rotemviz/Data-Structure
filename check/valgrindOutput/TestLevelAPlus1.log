==3668== Memcheck, a memory error detector
==3668== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==3668== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==3668== Command: ./a.out
==3668== Parent PID: 3451
==3668== 
==3668== Invalid read of size 8
==3668==    at 0x10CE52: AVL_Tree<int, Ship*>::rollRight(AVL_Tree<int, Ship*>::Node*) (AVL_Tree.h:74)
==3668==    by 0x10C5B6: AVL_Tree<int, Ship*>::remove(int const&, AVL_Tree<int, Ship*>::Node*) (AVL_Tree.h:192)
==3668==    by 0x10C467: AVL_Tree<int, Ship*>::remove(int const&, AVL_Tree<int, Ship*>::Node*) (AVL_Tree.h:170)
==3668==    by 0x10C335: AVL_Tree<int, Ship*>::remove(int const&, AVL_Tree<int, Ship*>::Node*) (AVL_Tree.h:142)
==3668==    by 0x10BDC3: AVL_Tree<int, Ship*>::remove(int const&) (AVL_Tree.h:266)
==3668==    by 0x10B26E: Ocean::remove_ship(int) (pirates24b1.cpp:47)
==3668==    by 0x10A545: main (main24b1.cpp:37)
==3668==  Address 0x10 is not stack'd, malloc'd or (recently) free'd
==3668== 
==3668== 
==3668== Process terminating with default action of signal 11 (SIGSEGV)
==3668==  Access not within mapped region at address 0x10
==3668==    at 0x10CE52: AVL_Tree<int, Ship*>::rollRight(AVL_Tree<int, Ship*>::Node*) (AVL_Tree.h:74)
==3668==    by 0x10C5B6: AVL_Tree<int, Ship*>::remove(int const&, AVL_Tree<int, Ship*>::Node*) (AVL_Tree.h:192)
==3668==    by 0x10C467: AVL_Tree<int, Ship*>::remove(int const&, AVL_Tree<int, Ship*>::Node*) (AVL_Tree.h:170)
==3668==    by 0x10C335: AVL_Tree<int, Ship*>::remove(int const&, AVL_Tree<int, Ship*>::Node*) (AVL_Tree.h:142)
==3668==    by 0x10BDC3: AVL_Tree<int, Ship*>::remove(int const&) (AVL_Tree.h:266)
==3668==    by 0x10B26E: Ocean::remove_ship(int) (pirates24b1.cpp:47)
==3668==    by 0x10A545: main (main24b1.cpp:37)
==3668==  If you believe this happened as a result of a stack
==3668==  overflow in your program's main thread (unlikely but
==3668==  possible), you can try to increase the size of the
==3668==  main thread stack using the --main-stacksize= flag.
==3668==  The main thread stack size used in this run was 8388608.
==3668== 
==3668== HEAP SUMMARY:
==3668==     in use at exit: 84,399 bytes in 107 blocks
==3668==   total heap usage: 228 allocs, 121 frees, 87,330 bytes allocated
==3668== 
==3668== LEAK SUMMARY:
==3668==    definitely lost: 0 bytes in 0 blocks
==3668==    indirectly lost: 0 bytes in 0 blocks
==3668==      possibly lost: 0 bytes in 0 blocks
==3668==    still reachable: 84,399 bytes in 107 blocks
==3668==         suppressed: 0 bytes in 0 blocks
==3668== Reachable blocks (those to which a pointer was found) are not shown.
==3668== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==3668== 
==3668== For lists of detected and suppressed errors, rerun with: -s
==3668== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
